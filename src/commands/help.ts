import { SlashCommandBuilder, EmbedBuilder, ChatInputCommandInteraction } from 'discord.js';
import { SlashCommand } from '../types';
import { logger } from '../lib/logger';

export const helpCommand: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('help')
    .setDescription('Display help information about ArchiveMind bot commands')
    .addStringOption(option =>
      option
        .setName('command')
        .setDescription('Get detailed help for a specific command')
        .setRequired(false)
        .addChoices(
          { name: 'watch', value: 'watch' },
          { name: 'archive', value: 'archive' },
          { name: 'restore', value: 'restore' },
          { name: 'archives', value: 'archives' },
          { name: 'find', value: 'find' },
          { name: 'digest', value: 'digest' },
          { name: 'stats', value: 'stats' },
          { name: 'forget-channel', value: 'forget-channel' },
          { name: 'extract-resources', value: 'extract-resources' }
        )
    ) as SlashCommandBuilder,

  async execute(interaction: ChatInputCommandInteraction) {
    try {
      const specificCommand = interaction.options.getString('command');

      if (specificCommand) {
        const embed = getCommandHelpEmbed(specificCommand);
        await interaction.reply({ embeds: [embed], ephemeral: true });
      } else {
        const embed = getGeneralHelpEmbed();
        await interaction.reply({ embeds: [embed], ephemeral: true });
      }

      logger.info('Help command executed', {
        command: 'help',
        user: interaction.user.tag,
        guild: interaction.guild?.name || 'DM',
        specificCommand: specificCommand || 'general'
      });

    } catch (error) {
      logger.error('Error executing help command:', error);
      
      const errorMessage = 'Sorry, I encountered an error while displaying help information.';
      
      if (interaction.replied || interaction.deferred) {
        await interaction.followUp({ content: errorMessage, ephemeral: true });
      } else {
        await interaction.reply({ content: errorMessage, ephemeral: true });
      }
    }
  },
};

function getGeneralHelpEmbed(): EmbedBuilder {
  return new EmbedBuilder()
    .setTitle('üß† ArchiveMind Bot - Help')
    .setDescription('All-in-one channel lifecycle manager that automates archiving inactive channels and rescues valuable resources to create a searchable knowledge base.')
    .setColor(0x5865F2)
    .addFields(
      {
        name: 'üóÉÔ∏è Channel Archiving System',
        value: [
          '`/watch` - Monitor channels for auto-archiving',
          '`/archive` - Archive a channel immediately',
          '`/restore` - Restore an archived channel',
          '`/archives` - Browse and search archived channels'
        ].join('\n'),
        inline: false
      },
      {
        name: 'üì¶ Resource Rescue System',
        value: [
          '`/find` - Search rescued resources',
          '`/digest` - Generate knowledge reports',
          '`/extract-resources` - Manual resource extraction'
        ].join('\n'),
        inline: false
      },
      {
        name: 'üìä Administration',
        value: [
          '`/stats` - View comprehensive statistics',
          '`/forget-channel` - GDPR-compliant data deletion'
        ].join('\n'),
        inline: false
      },
      {
        name: '‚ùì Get Detailed Help',
        value: 'Use `/help <command>` for detailed information about any command.',
        inline: false
      },
      {
        name: 'üåü Key Features',
        value: [
          '‚Ä¢ Automatic inactive channel detection with warnings (7d, 3d, 1d)',
          '‚Ä¢ Smart resource extraction (files, links, code, pins)',
          '‚Ä¢ Complete channel restoration with original settings',
          '‚Ä¢ Searchable knowledge base with smart tagging',
          '‚Ä¢ Monthly digest generation for team onboarding',
          '‚Ä¢ GDPR-compliant data management',
          '‚Ä¢ Tombstone messages with restore commands'
        ].join('\n'),
        inline: false
      }
    )
    .setFooter({ 
      text: 'ArchiveMind ‚Ä¢ Use /help <command> for detailed command help',
      iconURL: 'https://cdn.discordapp.com/attachments/placeholder/bot-icon.png'
    })
    .setTimestamp();
}

function getCommandHelpEmbed(command: string): EmbedBuilder {
  const embed = new EmbedBuilder()
    .setColor(0x5865F2)
    .setTimestamp();

  switch (command) {
    case 'watch':
      return embed
        .setTitle('üëÅÔ∏è `/watch` Command')
        .setDescription('Monitor channels for automatic archiving based on inactivity with configurable warning periods.')
        .addFields(
          {
            name: 'Usage',
            value: '`/watch <channel> [inactivity_days] [rescue]`',
            inline: false
          },
          {
            name: 'Parameters',
            value: [
              '‚Ä¢ `channel` - Channel to monitor (required)',
              '‚Ä¢ `inactivity_days` - Days of inactivity before warning (default: 30)',
              '‚Ä¢ `rescue` - Enable resource rescue (default: true)'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Warning Schedule',
            value: [
              '‚Ä¢ 7 days before: First warning',
              '‚Ä¢ 3 days before: Second warning', 
              '‚Ä¢ 1 day before: Final warning',
              '‚Ä¢ Archive time: Automatic archiving with resource rescue'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Examples',
            value: [
              '`/watch #old-project` - Monitor with default settings',
              '`/watch #temp-chat inactivity_days:14 rescue:true` - Custom settings'
            ].join('\n'),
            inline: false
          }
        );

    case 'archive':
      return embed
        .setTitle('üì¶ `/archive` Command')
        .setDescription('Immediately archive a channel with resource extraction and tombstone creation.')
        .addFields(
          {
            name: 'Usage',
            value: '`/archive <channel> [reason]`',
            inline: false
          },
          {
            name: 'Parameters',
            value: [
              '‚Ä¢ `channel` - Channel to archive (required)',
              '‚Ä¢ `reason` - Reason for archiving (optional)'
            ].join('\n'),
            inline: false
          },
          {
            name: 'What happens',
            value: [
              '‚Ä¢ Scans last 500 messages for valuable resources',
              '‚Ä¢ Extracts files, links, code blocks, and pins',
              '‚Ä¢ Posts rescued items to archive library with tags',
              '‚Ä¢ Creates tombstone message with restore command',
              '‚Ä¢ Archives channel with original settings preserved'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Safety Features',
            value: [
              '‚Ä¢ Requires admin permissions',
              '‚Ä¢ Confirmation dialog prevents accidents',
              '‚Ä¢ Protected channels cannot be archived',
              '‚Ä¢ Complete audit trail maintained'
            ].join('\n'),
            inline: false
          }
        );

    case 'restore':
      return embed
        .setTitle('üîÑ `/restore` Command')
        .setDescription('Restore an archived channel to its original state with all settings and permissions.')
        .addFields(
          {
            name: 'Usage',
            value: '`/restore <channel_name> [reason]`',
            inline: false
          },
          {
            name: 'Parameters',
            value: [
              '‚Ä¢ `channel_name` - Name of archived channel (required)',
              '‚Ä¢ `reason` - Reason for restoration (optional)'
            ].join('\n'),
            inline: false
          },
          {
            name: 'What gets restored',
            value: [
              '‚Ä¢ Original channel name and category',
              '‚Ä¢ All permissions and role overrides',
              '‚Ä¢ Channel topic and slowmode settings',
              '‚Ä¢ NSFW flag and position',
              '‚Ä¢ Links to rescued resources in knowledge base'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Important Notes',
            value: [
              '‚Ä¢ Message history cannot be restored',
              '‚Ä¢ Rescued resources remain in knowledge base',
              '‚Ä¢ Use `/find` to access original resources',
              '‚Ä¢ Restoration is logged for audit purposes'
            ].join('\n'),
            inline: false
          }
        );

    case 'archives':
      return embed
        .setTitle('üìã `/archives` Command')
        .setDescription('Browse and search archived channels with comprehensive filtering options.')
        .addFields(
          {
            name: 'Usage',
            value: '`/archives [action] [query] [limit]`',
            inline: false
          },
          {
            name: 'Actions',
            value: [
              '‚Ä¢ `list` - Show all archived channels (default)',
              '‚Ä¢ `search` - Search by name, category, or topic',
              '‚Ä¢ `stats` - View archive statistics and analytics'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Search Features',
            value: [
              '‚Ä¢ Search by channel name (partial matches)',
              '‚Ä¢ Filter by category name',
              '‚Ä¢ Search channel topics and descriptions',
              '‚Ä¢ Case-insensitive matching',
              '‚Ä¢ Configurable result limits'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Examples',
            value: [
              '`/archives` - List recent archives',
              '`/archives action:search query:project` - Find project channels',
              '`/archives action:stats` - View detailed statistics'
            ].join('\n'),
            inline: false
          }
        );

    case 'find':
      return embed
        .setTitle('üîç `/find` Command')
        .setDescription('Search through rescued resources from archived channels with advanced filtering.')
        .addFields(
          {
            name: 'Usage',
            value: '`/find <query> [type] [author] [limit]`',
            inline: false
          },
          {
            name: 'Parameters',
            value: [
              '‚Ä¢ `query` - Search terms (required)',
              '‚Ä¢ `type` - Filter by resource type (file, link, code, etc.)',
              '‚Ä¢ `author` - Filter by author',
              '‚Ä¢ `limit` - Max results (1-20, default: 10)'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Search Capabilities',
            value: [
              '‚Ä¢ Full-text search across content and context',
              '‚Ä¢ Smart tagging based on channel and keywords',
              '‚Ä¢ File name and URL matching',
              '‚Ä¢ Code language detection',
              '‚Ä¢ Author and date filtering'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Examples',
            value: [
              '`/find "API documentation"` - Search all resources',
              '`/find "react" type:code` - Find React code snippets',
              '`/find "tutorial" type:link author:@user` - Specific search'
            ].join('\n'),
            inline: false
          }
        );

    case 'digest':
      return embed
        .setTitle('üìÑ `/digest` Command')
        .setDescription('Generate comprehensive knowledge digests from rescued resources.')
        .addFields(
          {
            name: 'Usage',
            value: '`/digest [days] [type] [format]`',
            inline: false
          },
          {
            name: 'Parameters',
            value: [
              '‚Ä¢ `days` - Time period for digest (default: 7)',
              '‚Ä¢ `type` - Filter by resource type',
              '‚Ä¢ `format` - Output format (embed or markdown)'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Digest Contents',
            value: [
              '‚Ä¢ Resource summary and statistics',
              '‚Ä¢ Categorized listings by type',
              '‚Ä¢ Code snippet previews with syntax highlighting',
              '‚Ä¢ Link descriptions and metadata',
              '‚Ä¢ File information and thumbnails',
              '‚Ä¢ Author contributions and timestamps'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Special Features',
            value: [
              '‚Ä¢ `/digest all` - Monthly digest of all resources',
              '‚Ä¢ Perfect for team onboarding',
              '‚Ä¢ Automated knowledge sharing',
              '‚Ä¢ Exportable formats (PDF, HTML, Markdown)'
            ].join('\n'),
            inline: false
          }
        );

    case 'stats':
      return embed
        .setTitle('üìà `/stats` Command')
        .setDescription('View comprehensive statistics and analytics for archives and resources.')
        .addFields(
          {
            name: 'Usage',
            value: '`/stats [type]`',
            inline: false
          },
          {
            name: 'Statistics Types',
            value: [
              '‚Ä¢ `overview` - General statistics (default)',
              '‚Ä¢ `channels` - Channel-specific analytics',
              '‚Ä¢ `resources` - Resource type breakdown',
              '‚Ä¢ `archives` - Archive history and trends'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Information Shown',
            value: [
              '‚Ä¢ Total archived channels and resources',
              '‚Ä¢ Resource breakdown by type and category',
              '‚Ä¢ Top contributors and active channels',
              '‚Ä¢ Recent archive activity and trends',
              '‚Ä¢ Storage usage and impact metrics',
              '‚Ä¢ Warning and restoration statistics'
            ].join('\n'),
            inline: false
          }
        );

    case 'forget-channel':
      return embed
        .setTitle('üóëÔ∏è `/forget-channel` Command')
        .setDescription('GDPR-compliant complete deletion of channel data (ADMIN ONLY).')
        .addFields(
          {
            name: 'Usage',
            value: '`/forget-channel <channel_name> <reason> <confirm_gdpr>`',
            inline: false
          },
          {
            name: 'Parameters',
            value: [
              '‚Ä¢ `channel_name` - Name of channel to delete (required)',
              '‚Ä¢ `reason` - Legal reason for deletion (required)',
              '‚Ä¢ `confirm_gdpr` - Must be true to proceed (required)'
            ].join('\n'),
            inline: false
          },
          {
            name: '‚ö†Ô∏è WARNING',
            value: [
              '‚Ä¢ **THIS ACTION CANNOT BE UNDONE**',
              '‚Ä¢ Permanently deletes ALL channel data',
              '‚Ä¢ Removes rescued resources and metadata',
              '‚Ä¢ Complies with GDPR "Right to be Forgotten"',
              '‚Ä¢ Requires administrator permissions'
            ].join('\n'),
            inline: false
          },
          {
            name: 'What gets deleted',
            value: [
              '‚Ä¢ Channel metadata and settings',
              '‚Ä¢ All rescued resources (files, links, code)',
              '‚Ä¢ Archive warnings and notifications',
              '‚Ä¢ Database records and audit trails',
              '‚Ä¢ All associated tombstone messages'
            ].join('\n'),
            inline: false
          }
        );

    case 'extract-resources':
      return embed
        .setTitle('üîç `/extract-resources` Command')
        .setDescription('Manually extract resources from recent messages in the current channel.')
        .addFields(
          {
            name: 'Usage',
            value: '`/extract-resources [count]`',
            inline: false
          },
          {
            name: 'Parameters',
            value: [
              '‚Ä¢ `count` - Number of recent messages to scan (default: 50, max: 500)'
            ].join('\n'),
            inline: false
          },
          {
            name: 'Use Cases',
            value: [
              '‚Ä¢ Testing resource extraction on existing channels',
              '‚Ä¢ Backfilling resources from important discussions',
              '‚Ä¢ Manual rescue before archiving',
              '‚Ä¢ Extracting resources from active channels'
            ].join('\n'),
            inline: false
          },
          {
            name: 'What gets extracted',
            value: [
              '‚Ä¢ Files and attachments (PDFs, images, documents)',
              '‚Ä¢ Valuable links (GitHub, docs, tutorials)',
              '‚Ä¢ Code blocks (5+ lines with syntax detection)',
              '‚Ä¢ Pinned messages and important content'
            ].join('\n'),
            inline: false
          }
        );

    default:
      return embed
        .setTitle('‚ùì Unknown Command')
        .setDescription(`Command "${command}" not found. Use \`/help\` to see all available commands.`);
  }
}